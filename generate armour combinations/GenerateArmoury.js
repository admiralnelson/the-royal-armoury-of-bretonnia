/* eslint-disable */
const fs = require('fs')

function InitFolders() {
    console.log(`creating folders...`)
    const directory = "autogenerated/variantmeshes/variantmeshdefinitions/autogenerated/";
    if (!fs.existsSync(directory)) {
        fs.mkdirSync(directory, { recursive: true });
    }
    const directory2 = "autogenerated/db/campaign_character_art_sets_tables/";
    if (!fs.existsSync(directory2)) {
        fs.mkdirSync(directory2, { recursive: true });
    }
    const directory3 = "autogenerated/ui/portraits/portholes/";
    if (!fs.existsSync(directory3)) {
        fs.mkdirSync(directory3, { recursive: true });
    }
    const directory4 = "autogenerated/ui/portraits/units/";
    if (!fs.existsSync(directory4)) {
        fs.mkdirSync(directory4, { recursive: true });
    }
    const directory5 = "autogenerated/db/agent_uniforms_tables/";
    if (!fs.existsSync(directory5)) {
        fs.mkdirSync(directory5, { recursive: true });
    }
    const directory6 = "autogenerated/db/variants_tables/";
    if (!fs.existsSync(directory6)) {
        fs.mkdirSync(directory6, { recursive: true });
    }
    const directory7 = "autogenerated/db/campaign_character_arts_tables/";
    if (!fs.existsSync(directory7)) {
        fs.mkdirSync(directory7, { recursive: true });
    }
}

function GetAllAvailableAssets() {
    const csv = fs.readFileSync('AssetIdsToTheActualAssetFilenames.csv', 'utf-8').replace(/\r/g, "")
    const lines = csv.split("\n")
    const headers = lines[0].split(",")

    const result = lines.slice(1).reduce((acc, line) => {
        const values = line.split(",")
        const obj = {}
        headers.forEach((header, i) => {
            obj[header] = values[i]
        })
        acc[obj.AssetId] = obj.AssetPath
        return acc
    }, {})

    return result
}

const AVAILABLE_ASSETS = GetAllAvailableAssets()

function GetBasicArmourSet() {
    const csv = fs.readFileSync('FaceAndBasicLooks.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split('\n')
    const headers = lines[0].split(',')

    const result = {};
    headers.forEach(header => {
        result[header] = []
    })

    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',')
        headers.forEach((header, index) => {
            result[header].push(values[index])
        })
    }
    return result

}

//console.lo(gGetArmoursAndWeaponsLists())


function GetFaceToCampaignAnimations() {
    const csv = fs.readFileSync('FaceToCampaignAnimations.csv', 'utf-8').replace(/\r/g, "")
    const rows = csv.split("\n")
    const result = {}
    
    for (let i = 1; i < rows.length; i++) {
        const values = rows[i].split(",")
        const currentFaceId = values[0]
        result[currentFaceId] = {
            LandAnimation: values[1],
            SeaAnimation: values[2],
            NavyAnimation: values[3],
            SeaUniform: values[4],
            NavyUniform: values[5],
        }
       
    }
    
    return result
}

const ANIMATIONS = GetFaceToCampaignAnimations()

function GetAssetIdToAnciliaryKeys() {
    const csv = fs.readFileSync('AssetIdsToTheActualAnciliaryKeys.csv', 'utf-8').replace(/\r/g, "")
    const rows = csv.split("\n")
    const result = {}
    
    for (let i = 1; i < rows.length; i++) {
        const values = rows[i].split(",")
        const currentAssetId = values[0]
        result[currentAssetId] = values[1]
    }
    
    return result
}

const ASSET_IDS_TO_ANCILIARY_KEYS = GetAssetIdToAnciliaryKeys()
const ANCILIARY_KEYS = new Set(Object.values(ASSET_IDS_TO_ANCILIARY_KEYS))

function GetFaceIdToIncompatibleAnciliaryKey() {
    const csv = fs.readFileSync('FaceIdToIncompatibleAnciliaryKey.csv', 'utf-8').replace(/\r/g, "")
    const rows = csv.split("\n")
    const result = {}
    
    for (let i = 1; i < rows.length; i++) {
        const values = rows[i].split(",")
        const currentAssetId = values[0]
        if(result[currentAssetId] == undefined) {
            result[currentAssetId] = []
        }
        result[currentAssetId].push(values[1])
    }
    
    return result
}

const INCOMPATIBLE_ANCILIARIES = GetFaceIdToIncompatibleAnciliaryKey()

function GetThumbnailsFromFaceIds() {
    const data = GetBasicArmourSet()   
    
    const rows = data["FaceId"].length
    const result = {}
    for (let i = 0; i < rows; i++) {
        const row = {
            Thumbnail: data.Thumbnail[i],
            ThumbnailMask1: data.ThumbnailMask1[i],
            ThumbnailMask2: data.ThumbnailMask2[i],
        };
        result[data.FaceId[i]] = row
    }
    return result
}

const FACE_ID_TO_THUMBNAILS = GetThumbnailsFromFaceIds()

function GetArmours() {
    const basicArmourSet = GetBasicArmourSet()

    const csv = fs.readFileSync('ListOfArmours.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split('\n')
    const headers = lines[0].split(',')

    const result = {};
    headers.forEach(header => {
        result[header] = []
    })

    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',')
        headers.forEach((header, index) => {
            if(index > 0 && basicArmourSet[header].includes(values[index])) {
                throw `${values[index]} should not be put in ListOfArmours.csv`
            }
            result[header].push(values[index])
        })
    }

    return result
}

function GetHelmets() {
    const basicArmourSet = GetBasicArmourSet()

    const csv = fs.readFileSync('ListOfHelmets.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split('\n')
    const headers = lines[0].split(',')

    const result = {};
    headers.forEach(header => {
        result[header] = []
    })

    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',')
        headers.forEach((header, index) => {
            if(index > 0 && basicArmourSet[header].includes(values[index])) {
                throw `${values[index]} should not be put in ListOfHelmets.csv`
            }
            result[header].push(values[index])
        })
    }

    return result
}

function GetWeapons() {
    const basicArmourSet = GetBasicArmourSet()

    const csv = fs.readFileSync('ListOfWeapons.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split('\n')
    const headers = lines[0].split(',')

    const result = {};
    headers.forEach(header => {
        result[header] = []
    })

    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',')
        headers.forEach((header, index) => {
            if(index > 0 && basicArmourSet[header].includes(values[index])) {
                throw `${values[index]} should not be put in ListOfWeapons.csv`
            }
            result[header].push(values[index])
        })
    }

    return result
}

function GetShields() {
    const basicArmourSet = GetBasicArmourSet()

    const csv = fs.readFileSync('ListOfShields.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split('\n')
    const headers = lines[0].split(',')

    const result = {};
    headers.forEach(header => {
        result[header] = []
    })

    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',')
        headers.forEach((header, index) => {
            if(index > 0 && basicArmourSet[header].includes(values[index])) {
                throw `${values[index]} should not be put in ListOfShields.csv`
            }
            result[header].push(values[index])
        })
    }

    return result
}

function GenerateBasicArmourySetIds() {
    const data = GetBasicArmourSet()   
    
    const rows = data["FaceId"].length
    const result = []
    for (let i = 0; i < rows; i++) {
        const row = {
            FaceId: data.FaceId[i],
            HelmetId: data.HelmetId[i],
            ArmourId: data.ArmourId[i],
            WeaponId: data.WeaponId[i],
            ShieldId: data.ShieldId[i]
        };
        result.push(`ArmourySystem__${row.FaceId}__${row.HelmetId}__${row.ArmourId}__${row.WeaponId}__${row.ShieldId}`);
    }
    return result
}

function GenerateCombinations() {
    const basicSet = GetBasicArmourSet()
    const basicCombinations = GenerateBasicArmourySetIds()

    const helmets = GetHelmets().HelmetId.concat(basicSet.HelmetId)
    const armours = GetArmours().ArmourId.concat(basicSet.ArmourId)
    const weapons = GetWeapons().WeaponId.concat(basicSet.WeaponId)
    const shields = GetShields().ShieldId.concat(basicSet.ShieldId)

    const helmetsAgents = GetHelmets()
    const armoursAgents = GetArmours()
    const weaponsAgents = GetWeapons()
    const shieldsAgents = GetShields()

    const result = []
    for (const face of basicSet.FaceId) {
        for (const helmet of helmets) {
            for (const armour of armours) {
                for (const weapon of weapons) {
                    for (const shield of shields) {
                        const faceIndex = basicSet.FaceId.indexOf(face)
                        const agentType = basicSet.AgentSubType[faceIndex]

                        if(helmetsAgents.HelmetId.indexOf(helmet) >= 0) {
                            const index = helmetsAgents.HelmetId.indexOf(helmet)
                            const agent = helmetsAgents.AgentSubType[index]
                            if(agentType != agent) continue
                        }

                        if(armoursAgents.ArmourId.indexOf(armour) >= 0) {
                            const index = armoursAgents.ArmourId.indexOf(armour)
                            const agent = armoursAgents.AgentSubType[index]
                            if(agentType != agent) continue
                        }

                        if(weaponsAgents.WeaponId.indexOf(weapon) >= 0) {
                            const index = weaponsAgents.WeaponId.indexOf(weapon)
                            const agent = weaponsAgents.AgentSubType[index]
                            if(agentType != agent) continue
                        }

                        if(shieldsAgents.ShieldId.indexOf(shield) >= 0) {
                            const index = shieldsAgents.ShieldId.indexOf(shield)
                            const agent = shieldsAgents.AgentSubType[index]
                            if(agentType != agent) continue
                        }

                        //don't use incompatible hair!
                        const hairIndex = basicSet.HelmetId.indexOf(helmet)
                        if(faceIndex >=0 && hairIndex >= 0) {
                            if(faceIndex != hairIndex) continue
                        }

                        //a bit of optimisation
                        //don't use other basic armour (maybe I'll enable this in the future))
                        const armourIndex = basicSet.ArmourId.indexOf(armour)
                        if(faceIndex >=0 && armourIndex >= 0) {
                            if(faceIndex != armourIndex) continue
                        }

                        //a bit of optimisation
                        //don't use other basic weapon (maybe I'll enable this in the future))
                        const weaponIndex = basicSet.WeaponId.indexOf(weapon)
                        if(faceIndex >=0 && weaponIndex >= 0) {
                            if(faceIndex != weaponIndex) continue
                        }

                        //a bit of optimisation
                        //don't use other basic shield (maybe I'll enable this in the future))
                        const shieldIndex = basicSet.ShieldId.indexOf(shield)
                        if(faceIndex >=0 && shieldIndex >= 0) {
                            if(faceIndex != shieldIndex) continue
                        }


                        const x = `ArmourySystem__${face}__${helmet}__${armour}__${weapon}__${shield}`
                        if(basicCombinations.indexOf(x) >= 0) continue
                        if(result.indexOf(x) >= 0) continue
                        result.push(x)
                    }
                }
            }
        }   
    }

    return result
}

function GenerateXMLFromIds(xmlname) {
    const basicIds = GenerateBasicArmourySetIds()
    const combinationsIds = GenerateCombinations()

    console.log(`Generating thumbnails xml...`)
    //generate thumbnails with basic armour
    let entries = `
    <!-- BASIC THUMBNAILS STARTS HERE -->
    `
    for (const id of basicIds) {
        const faceId = id.split("__")[1]
        const thumbnail = FACE_ID_TO_THUMBNAILS[faceId]
        if(thumbnail == undefined) {
            throw `this faceid ${faceId} has no thumbnail!`
        }
        const entry = `
        <Entry id="${id}">
            <CameraSettings>
                <Distance_Head>0.8</Distance_Head>
                <Theta_Head>0</Theta_Head>
                <Phi_Head>0</Phi_Head>
                <FoV_Head>0</FoV_Head>
                <Distance_2>30</Distance_2>
                <Distance_Body>4</Distance_Body><!--optional-->
                <Theta_Body>0</Theta_Body><!--optional-->
                <Phi_Body>0</Phi_Body><!--optional-->
                <FoV_Body>0</FoV_Body><!--optional-->
                <Distance_2_Body>30</Distance_2_Body><!--optional-->
            </CameraSettings>
        <Variants>
			<Variant id="${id}">
                <FileDiffuse>${thumbnail.Thumbnail}</FileDiffuse>
                <FileMask1>${thumbnail.ThumbnailMask1 ?? ""}</FileMask1> <!--All three masks are optional-->
                <FileMask2>${thumbnail.ThumbnailMask2 ?? ""}</FileMask2>	<!--All three masks are optional-->
                <FileMask3></FileMask3>	<!--All three masks are optional-->
            </Variant>
        </Variants>
        </Entry>
        `
        entries += entry
    }
    entries += `
    <!-- BASIC THUMBNAILS ENDS HERE -->
    `

    for (const combinationId of combinationsIds) {
        const faceId = combinationId.split("__").slice(0, 2).join("__")
        const basicId = basicIds.find( id => id.includes(faceId) )
        const faceIdOnly = combinationId.split("__")[1]
        const thumbnail = FACE_ID_TO_THUMBNAILS[faceIdOnly]
        if(thumbnail == undefined) {
            throw `this faceid ${faceIdOnly} has no thumbnail!`
        }
        const entry = `
        <Entry id="${combinationId}">
            <CameraSettings>
                <Distance_Head>0.8</Distance_Head>
                <Theta_Head>0</Theta_Head>
                <Phi_Head>0</Phi_Head>
                <FoV_Head>0</FoV_Head>
                <Distance_2>30</Distance_2>
                <Distance_Body>4</Distance_Body><!--optional-->
                <Theta_Body>0</Theta_Body><!--optional-->
                <Phi_Body>0</Phi_Body><!--optional-->
                <FoV_Body>0</FoV_Body><!--optional-->
                <Distance_2_Body>30</Distance_2_Body><!--optional-->
            </CameraSettings>
        <Variants>
			<Variant id="${combinationId}">
                <FileDiffuse>${thumbnail.Thumbnail}</FileDiffuse>
                <FileMask1>${thumbnail.ThumbnailMask1 ?? ""}</FileMask1> <!--All three masks are optional-->
                <FileMask2>${thumbnail.ThumbnailMask2 ?? ""}</FileMask2>	<!--All three masks are optional-->
                <FileMask3></FileMask3>	<!--All three masks are optional-->
            </Variant>
        </Variants>
        </Entry>
        `
        entries += entry
    }

    const template = `
    <?xml version="1.0" encoding="UTF-8"?>
    <PortraitSettings version="4">
        ${entries}
    </PortraitSettings>
    `

    fs.writeFileSync(`autogenerated/ui/portraits/portholes/portrait_settings__autogenerated_${xmlname}.xml`, template)
    fs.writeFileSync(`autogenerated/ui/portraits/units/portrait_settings__autogenerated_${xmlname}.xml`, template)
}

//campaign_character_art_sets_tables
function GenerateCampaignCharacterArtSetsTables(tableName) {
    const basicArmourSet =  GetBasicArmourSet()
    const basicIds = GenerateBasicArmourySetIds()
    const combinationsIds = GenerateCombinations()

    console.log(`Generating campaign_character_art_sets_tables`)

    let   header = `art_set_id	agent_type	culture	subculture	faction	is_custom	is_male	agent_subtype	campaign_map_scale\n`
          header+= `#campaign_character_art_sets_tables;6;db/campaign_character_art_sets_tables/@@@autogenerated_${tableName}								`

    
    //basic looks thumbnail db entries
    let entries = ``
    for (const basicId of basicIds) {
        const faceId = basicId.split("__")[1]
        const index = basicArmourSet.FaceId.indexOf(faceId)
        const lordCultureData = basicArmourSet.Culture[index]
        const entry = `${basicId}\t${lordCultureData["AgentType"]}\t${lordCultureData["Culture"]}\t\t\tfalse\ttrue\t${lordCultureData["AgentSubType"]}\t1.000\n`
        entries += entry
    }

    //customisable armours db entries
    for (const combinationId of combinationsIds) {
        const faceId = combinationId.split("__")[1]
        const index = basicArmourSet.FaceId.indexOf(faceId)
        const lordCultureData = basicArmourSet.Culture[index]
        const entry = `${combinationId}\t${lordCultureData["AgentType"]}\t${lordCultureData["Culture"]}\t\t\tfalse\ttrue\t${lordCultureData["AgentSubType"]}\t1.000\n`
        entries += entry
    }

    const tsv = `${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/campaign_character_art_sets_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateUniforms(tableName) {
    const basicIds = GenerateBasicArmourySetIds()
    const combinationsIds = GenerateCombinations()

    console.log(`Generating agent_uniforms_tables`)

    let header = `uniform_name	filename	battle_filename	campaign_porthole_filename	campaign_politician_filename	campaign_override_skeleton\n`
       header += `#agent_uniforms_tables;10;db/agent_uniforms_tables/@@@autogenerated_${tableName}	`

    let entries = `` 
    const combinedIds = basicIds.concat(combinationsIds)
    for (const id of combinedIds) {
        entries += `${id}\t${id}\t${id}\t${id}\t\t\n`
    }

    const tsv=`${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/agent_uniforms_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateVariantTables(tableName, scale, mountScale) {
    console.log(`Generating variants_tables`)

    const basicIds = GenerateBasicArmourySetIds()
    const combinationsIds = GenerateCombinations()

    let header = `variant_name	tech_folder	variant_filename	low_poly_filename	mount_scale	scale	scale_variation	super_low_poly_filename\n`
       header += `#variants_tables;6;db/variants_tables/@@@autogenerated_${tableName}							`
    
    let entries = `` 
    const combinedIds = basicIds.concat(combinationsIds)
    for (const id of combinedIds) {
        entries += `${id}\t\tautogenerated/${id}\t\t${mountScale}\t${scale}\t0\t\n`
    }

    const tsv=`${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/variants_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateCampaignCharacterArtsTables(tableName, seedNumber) {
    console.log(`Generating campaign_character_arts_tables`)

    const basicIds = GenerateBasicArmourySetIds()
    const combinationsIds = GenerateCombinations()

    let header = `id	art_set_id	level	age	portrait	season	uniform	card	info	sea_uniform	navy_uniform	land_animation	sea_animation	navy_animation	land_animation_vfx_filter	sea_animation_vfx_filter	navy_animation_vfx_filter\n`
        header += `#campaign_character_arts_tables;0;db/campaign_character_arts_tables/@@@autogenerated_${tableName}																`
    
    const combinedIds = basicIds.concat(combinationsIds)
    let entries = ``
    for (const id of combinedIds) {
        const faceId = id.split("__")[1]
        const animation = ANIMATIONS[faceId]
        if(!animation) {
            throw `${faceId} has undefined animation`
        }
        if(animation.LandAnimation == undefined) {
            throw `${faceId} has undefined Land animation`
        }
        if(animation.SeaAnimation == undefined) {
            throw `${faceId} has undefined Sea animation`
        }
        if(animation.NavyAnimation == undefined) {
            throw `${faceId} has undefined Navy animation`
        }
        if(animation.SeaUniform == undefined) {
            throw `${faceId} has undefined Sea uniform`
        }
        if(animation.NavyUniform == undefined) {
            throw `${faceId} has undefined Navy uniform`
        }

        entries += `${seedNumber}\t${id}\t0\t0\t\tnone\t${id}\t\t\t${animation.SeaUniform}\t${animation.NavyUniform}\t${animation.LandAnimation}\t${animation.SeaAnimation}\t${animation.NavyAnimation}\t0\t0\t0\n`
        seedNumber++
    }    

    const tsv=`${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/campaign_character_arts_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateVariantMeshDefinitions() {
    const basicIds = GenerateBasicArmourySetIds()
    const combinationsIds = GenerateCombinations()

    console.log(`Generating Variantmesh definitions...`)
    const ids = basicIds.concat(combinationsIds)
    for (const id of ids) {
        const split = id.split("__")
        const components = {
            FaceId: split[1],
            HelmetId: split[2],
            ArmourId: split[3],
            WeaponId: split[4],
            ShieldId: split[5]
        }
        if(!AVAILABLE_ASSETS[components.FaceId]) {
            throw(`${components.FaceId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.HelmetId]) {
            throw(`${components.HelmetId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.ArmourId]) {
            throw(`${components.ArmourId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.WeaponId]) {
            throw(`${components.WeaponId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.ShieldId]) {
            throw(`${components.ShieldId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        const entry = `
<VARIANT_MESH>
    <SLOT name="head" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.FaceId]}">
            <META_DATA>audio_entity_type:wh_human_male_bret_french</META_DATA>
            <META_DATA>audio_armour_type:plate</META_DATA>
        </VARIANT_MESH>
    </SLOT>
    <SLOT name="crest" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.HelmetId]}" />
    </SLOT>
    <SLOT name="body" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.ArmourId]}">
            <META_DATA>audio_entity_type:wh_human_male_bret_french</META_DATA>
            <META_DATA>audio_armour_type:plate</META_DATA>
        </VARIANT_MESH>
    </SLOT>
    <SLOT name="weapon_1" attach_point="be_prop_0" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.WeaponId]}" />
    </SLOT>
    <SLOT name="weapon_2" attach_point="be_prop_1" />
    <SLOT name="shield" attach_point="be_prop_2" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.ShieldId]}" />
    </SLOT>
    <SLOT name="weapon_3" attach_point="be_prop_3" />
    <SLOT name="weapon_4" attach_point="be_prop_4" />
    <SLOT name="weapon_5" attach_point="be_prop_5" />
</VARIANT_MESH>    
        `
        fs.writeFileSync(`autogenerated/variantmeshes/variantmeshdefinitions/autogenerated/${id}.variantmeshdefinition`, entry)
    }
}

function GenerateTypescriptArmouryData(projectName, factions, agentSubtypes, listOfArmoursAndWeapons) {

    function ArmoryData() {
        const armourset = GetBasicArmourSet()
        const rows = armourset["FaceId"].length
        let generatedBasicSet = ``
        for (let i = 0; i < rows; i++) {
            const row = rows[i]
            const template = `
            ["${row.Thumbnail}"] : {
                FaceId: "${rowFaceId}",
                HelmetId: "${row.HelmetId}",
                ArmourId: "${row.ArmourId}",
                WeaponId: "${row.WeaponId}",
                ShieldId: "${row.ShieldId}"
            },`
            generatedBasicSet += template
        }

        return generatedBasicSet
    }

    function Factions() {
        return `[${factions.join(",")}]`
    }

    function AgentSubTypes() {
        let result = new Set()
        for (const [faceId, agentSubtype] of agentSubtypes) {
            result.add(agentSubtype.AgentSubType)
        }
        return `[${Array.from(result.values()).join(",")}]`
    }

    function RegisteredArmours() {
        const armours = listOfArmoursAndWeapons.ArmourId
        let entries = ``
        for (const armour of armours) {
            const index = listOfArmoursAndWeapons.ArmourId.indexOf(armour)
            const anciliaryKey = ASSET_IDS_TO_ANCILIARY_KEYS[armour]
            const entry = `{
    anciliaryKey: "${anciliaryKey}",
    subtypeAgentKey: "${listOfArmoursAndWeapons.AgentSubType[index]}",
    assetId: "${armour}"
},`
            entries += entry
        }

        return entries
    }

    function RegisteredHelmets() {
        const helmets = listOfArmoursAndWeapons.HelmetId
        let entries = ``
        for (const helmet of helmets) {
            const index = listOfArmoursAndWeapons.HelmetId.indexOf(helmet)
            const anciliaryKey = ASSET_IDS_TO_ANCILIARY_KEYS[helmet]
            const entry = `{
    anciliaryKey: "${anciliaryKey}",
    subtypeAgentKey: "${listOfArmoursAndWeapons.AgentSubType[index]}",
    assetId: "${helmet}"
},`
            entries += entry
        }

        return entries
    }

    function RegisteredWeapons() {
        const weapons = listOfArmoursAndWeapons.WeaponId
        let entries = ``
        for (const weapon of weapons) {
            const index = listOfArmoursAndWeapons.WeaponId.indexOf(weapon)
            const anciliaryKey = ASSET_IDS_TO_ANCILIARY_KEYS[weapon]
            const entry = `{
    anciliaryKey: "${anciliaryKey}",
    subtypeAgentKey: "${listOfArmoursAndWeapons.AgentSubType[index]}",
    assetId: "${weapon}"
},`
            entries += entry
        }

        return entries
    }

    function RegisteredShields() {
        const shields = listOfArmoursAndWeapons.ShieldId
        let entries = ``
        for (const shield of shields) {
            const index = listOfArmoursAndWeapons.ShieldId.indexOf(shield)
            const anciliaryKey = ASSET_IDS_TO_ANCILIARY_KEYS[shield]
            const entry = `{
    anciliaryKey: "${anciliaryKey}",
    subtypeAgentKey: "${listOfArmoursAndWeapons.AgentSubType[index]}",
    assetId: "${shield}"
},`
            entries += entry
        }

        return entries
    }

    const generatedBasicSet = ArmoryData()
    const generatedFactions = Factions()
    const generatedSubtypes = AgentSubTypes()
    const generatedArmours = RegisteredArmours()
    const generatedHelmets = RegisteredHelmets()
    const generatedWeapons = RegisteredWeapons()
    const generatedShields = RegisteredShields()
    const source = `
namespace ${projectName} {

    type ThumbnailFilenameToBasicSet = {
        [thumbnailFile: string]: ArmourySystem.BasicSet
    }

    const ARMOURY_DATA: ThumbnailFilenameToBasicSet = {
        ${generatedBasicSet}
    }

    ArmourySystem.RegisterFaction(${generatedFactions})
    ArmourySystem.RegisterSubtypeAgent(${generatedSubtypes})
    for (const [fileName, basicSet] of Object.entries(ARMOURY_DATA)) {
        ArmourySystem.RegisterThumbnailFilenamesToAssociatedBasicSet(fileName, basicSet)
    }
    ArmourySystem.RegisterArmour([
        ${generatedArmours}
    ])
    ArmourySystem.RegisterHelmet([
        ${generatedHelmets}
    ])
    ArmourySystem.RegisterWeapon([
        ${generatedWeapons}
    ])
    ArmourySystem.RegisterShield([
        ${generatedShields}
    ])
    ArmourySystem.MakeThisItemIncompatibleWithAgent("admiralnelson_bret_lord_massif_sword_shield_agent_key", ["wh_main_anc_armour_gamblers_armour"])
    
}
`
}

const SEED_NUMBER = 0x5EEDFEED
const LORD_SCALE = 1.2
const MOUNT_SCALE = 1.1
InitFolders()
GenerateXMLFromIds("bretonnia_royal_armoury")
GenerateCampaignCharacterArtSetsTables("bretonnia_royal_armoury")
GenerateUniforms("bretonnia_royal_armoury")
GenerateCampaignCharacterArtsTables("bretonnia_royal_armory", SEED_NUMBER)
GenerateVariantTables("bretonnia_royal_armoury", LORD_SCALE, MOUNT_SCALE)
GenerateVariantMeshDefinitions()