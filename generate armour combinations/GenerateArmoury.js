/* eslint-disable */
const fs = require('fs')

function InitFolders() {
    console.log(`creating folders...`)
    const directory = "autogenerated/variantmeshes/variantmeshdefinitions/autogenerated/";
    if (!fs.existsSync(directory)) {
        fs.mkdirSync(directory, { recursive: true });
    }
    const directory2 = "autogenerated/db/campaign_character_art_sets_tables/";
    if (!fs.existsSync(directory2)) {
        fs.mkdirSync(directory2, { recursive: true });
    }
    const directory3 = "autogenerated/ui/portraits/portholes/";
    if (!fs.existsSync(directory3)) {
        fs.mkdirSync(directory3, { recursive: true });
    }
    const directory4 = "autogenerated/ui/portraits/units/";
    if (!fs.existsSync(directory4)) {
        fs.mkdirSync(directory4, { recursive: true });
    }
    const directory5 = "autogenerated/db/agent_uniforms_tables/";
    if (!fs.existsSync(directory5)) {
        fs.mkdirSync(directory5, { recursive: true });
    }
    const directory6 = "autogenerated/db/variants_tables/";
    if (!fs.existsSync(directory6)) {
        fs.mkdirSync(directory6, { recursive: true });
    }
    const directory7 = "autogenerated/db/campaign_character_arts_tables/";
    if (!fs.existsSync(directory7)) {
        fs.mkdirSync(directory7, { recursive: true });
    }
}

function GetAllAvailableAssets() {
    const csv = fs.readFileSync('AssetIdsToTheActualAssetFilenames.csv', 'utf-8').replace(/\r/g, "")
    const lines = csv.split("\n")
    const headers = lines[0].split(",")

    const result = lines.slice(1).reduce((acc, line) => {
        const values = line.split(",")
        const obj = {}
        headers.forEach((header, i) => {
            obj[header] = values[i]
        })
        acc[obj.AssetId] = obj.AssetPath
        return acc
    }, {})

    return result
}

const AVAILABLE_ASSETS = GetAllAvailableAssets()

function GetBasicArmourSet() {
    const csv = fs.readFileSync('FaceAndBasicLooks.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split('\n')
    const headers = lines[0].split(',')

    const result = {};
    headers.forEach(header => {
        result[header] = []
    })

    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',')
        headers.forEach((header, index) => {
            result[header].push(values[index])
        })
    }
    return result

}

function GetArmoursAndWeaponsLists() {
    const basicArmourSet = GetBasicArmourSet()

    const csv = fs.readFileSync('ListOfArmoursAndWeapons.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split('\n')
    const headers = lines[0].split(',')

    const result = {};
    headers.forEach(header => {
        result[header] = []
    })

    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',')
        headers.forEach((header, index) => {
            if(basicArmourSet[header].includes(values[index])) {
                throw `${values[index]} should not be put in ListOfArmoursAndWeapons.csv`
            }
            result[header].push(values[index])
        })
    }

    return result
}

function GetFaceToAgentType() {
    const csv = fs.readFileSync('FaceToAgentType.csv', 'utf-8').replace(/\r/g, "")
    
    const lines = csv.split("\n");
    const headers = lines[0].split(",");
    let result = {};
  
    for (let i = 1; i < lines.length; i++) {
      const currentLine = lines[i].split(",");
      let obj = {};
      for (let j = 0; j < headers.length; j++) {
        obj[headers[j]] = currentLine[j];
      }
      result[currentLine[0]] = obj;
    }
  
    return result;
}


function GetFaceToCampaignAnimations() {
    const csv = fs.readFileSync('FaceToCampaignAnimations.csv', 'utf-8').replace(/\r/g, "")
    const rows = csv.split("\n")
    const result = {}
    
    for (let i = 1; i < rows.length; i++) {
        const values = rows[i].split(",")
        const currentFaceId = values[0]
        result[currentFaceId] = {
            LandAnimation: values[1],
            SeaAnimation: values[2],
            NavyAnimation: values[3],
            SeaUniform: values[4],
            NavyUniform: values[5],
        }
       
    }
    
    return result; 
}

const ANIMATIONS = GetFaceToCampaignAnimations()



function GenerateBasicArmourySetIds() {
    const data = GetBasicArmourSet()   
    
    const rows = data["FaceId"].length
    const result = []
    for (let i = 0; i < rows; i++) {
        const row = {
            FaceId: data.FaceId[i],
            HelmetId: data.HelmetId[i],
            ArmourId: data.ArmourId[i],
            WeaponId: data.WeaponId[i],
            ShieldId: data.ShieldId[i]
        };
        result.push(`ArmourySystem__${row.FaceId}__${row.HelmetId}__${row.ArmourId}__${row.WeaponId}__${row.ShieldId}`);
    }
    return result
}

function GenerateCombinations() {
    const faces = GetBasicArmourSet()["FaceId"]
    const armours = GetArmoursAndWeaponsLists()
    const result = []
    for (const face of faces) {
        for (const helmet of armours["HelmetId"]) {
            for (const armour of armours["ArmourId"]) {
                for (const weapon of armours["WeaponId"]) {
                    for (const shield of armours["ShieldId"]) {
                        const x = `ArmourySystem__${face}__${helmet}__${armour}__${weapon}__${shield}`
                        result.push(x)
                    }
                }
            }
        }   
    }

    return result
}

function GenerateXMLFromIds(xmlname, basicIds, combinationsIds) {
    console.log(`Generating thumbnails xml...`)
    //generate thumbnails with basic armour
    let entries = `
    <!-- BASIC THUMBNAILS STARTS HERE -->
    `
    for (const id of basicIds) {
        const entry = `
        <Entry id="${id}">
            <CameraSettings>
                <Distance_Head>0.8</Distance_Head>
                <Theta_Head>0</Theta_Head>
                <Phi_Head>0</Phi_Head>
                <FoV_Head>0</FoV_Head>
                <Distance_2>30</Distance_2>
                <Distance_Body>4</Distance_Body><!--optional-->
                <Theta_Body>0</Theta_Body><!--optional-->
                <Phi_Body>0</Phi_Body><!--optional-->
                <FoV_Body>0</FoV_Body><!--optional-->
                <Distance_2_Body>30</Distance_2_Body><!--optional-->
            </CameraSettings>
        <Variants>
			<Variant id="${id}">
                <FileDiffuse>UI/Portraits/Portholes/ArmourySystem/${id}.png</FileDiffuse>
                <FileMask1>UI/Portraits/Portholes/ArmourySystem/${id}_mask1.png</FileMask1> <!--All three masks are optional-->
                <FileMask2>UI/Portraits/Portholes/ArmourySystem/${id}_mask2.png</FileMask2>	<!--All three masks are optional-->
                <FileMask3></FileMask3>	<!--All three masks are optional-->
            </Variant>
        </Variants>
        </Entry>
        `
        entries += entry
    }
    entries += `
    <!-- BASIC THUMBNAILS ENDS HERE -->
    `

    for (const combinationId of combinationsIds) {
        const faceId = combinationId.split("__").slice(0, 2).join("__")
        const basicId = basicIds.find( id => id.includes(faceId) )
        const entry = `
        <Entry id="${combinationId}">
            <CameraSettings>
                <Distance_Head>0.8</Distance_Head>
                <Theta_Head>0</Theta_Head>
                <Phi_Head>0</Phi_Head>
                <FoV_Head>0</FoV_Head>
                <Distance_2>30</Distance_2>
                <Distance_Body>4</Distance_Body><!--optional-->
                <Theta_Body>0</Theta_Body><!--optional-->
                <Phi_Body>0</Phi_Body><!--optional-->
                <FoV_Body>0</FoV_Body><!--optional-->
                <Distance_2_Body>30</Distance_2_Body><!--optional-->
            </CameraSettings>
        <Variants>
			<Variant id="${combinationId}">
                <FileDiffuse>UI/Portraits/Portholes/ArmourySystem/${basicId}.png</FileDiffuse>
                <FileMask1>UI/Portraits/Portholes/ArmourySystem/${basicId}_mask1.png</FileMask1> <!--All three masks are optional-->
                <FileMask2>UI/Portraits/Portholes/ArmourySystem/${basicId}_mask2.png</FileMask2>	<!--All three masks are optional-->
                <FileMask3></FileMask3>	<!--All three masks are optional-->
            </Variant>
        </Variants>
        </Entry>
        `
        entries += entry
    }

    const template = `
    <?xml version="1.0" encoding="UTF-8"?>
    <PortraitSettings version="4">
        ${entries}
    </PortraitSettings>
    `

    fs.writeFileSync(`autogenerated/ui/portraits/portholes/portrait_settings__autogenerated_${xmlname}.xml`, template)
    fs.writeFileSync(`autogenerated/ui/portraits/units/portrait_settings__autogenerated_${xmlname}.xml`, template)
}

//campaign_character_art_sets_tables
function GenerateCampaignCharacterArtSetsTables(tableName, faceToAgentTypes, basicIds, combinationsIds) {
    console.log(`Generating campaign_character_art_sets_tables`)

    let   header = `art_set_id	agent_type	culture	subculture	faction	is_custom	is_male	agent_subtype	campaign_map_scale\n`
          header+= `#campaign_character_art_sets_tables;6;db/campaign_character_art_sets_tables/@@@autogenerated_${tableName}								`

    
    //basic looks thumbnail db entries
    let entries = ``
    for (const basicId of basicIds) {
        const faceId = basicId.split("__")[1]
        const lordCultureData = faceToAgentTypes[faceId]
        const entry = `${basicId}\t${lordCultureData["AgentType"]}\t${lordCultureData["Culture"]}\t\t\tfalse\ttrue\t${lordCultureData["AgentSubType"]}\t1.000\n`
        entries += entry
    }

    //customisable armours db entries
    for (const combinationId of combinationsIds) {
        const faceId = combinationId.split("__")[1]
        const lordCultureData = faceToAgentTypes[faceId]
        const entry = `${combinationId}\t${lordCultureData["AgentType"]}\t${lordCultureData["Culture"]}\t\t\tfalse\ttrue\t${lordCultureData["AgentSubType"]}\t1.000\n`
        entries += entry
    }

    const tsv = `${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/campaign_character_art_sets_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateUniforms(tableName, basicIds, combinationsIds) {
    console.log(`Generating agent_uniforms_tables`)

    let header = `uniform_name	filename	battle_filename	campaign_porthole_filename	campaign_politician_filename	campaign_override_skeleton\n`
       header += `#agent_uniforms_tables;10;db/agent_uniforms_tables/@@@autogenerated_${tableName}	`

    let entries = `` 
    const combinedIds = basicIds.concat(combinationsIds)
    for (const id of combinedIds) {
        entries += `${id}\t${id}\t${id}\t${id}\t\t\n`
    }

    const tsv=`${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/agent_uniforms_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateVariantTables(tableName, scale, mountScale, basicIds, combinationsIds) {
    console.log(`Generating variants_tables`)

    let header = `variant_name	tech_folder	variant_filename	low_poly_filename	mount_scale	scale	scale_variation	super_low_poly_filename\n`
       header += `#variants_tables;6;db/variants_tables/@@@autogenerated_${tableName}							`
    
    let entries = `` 
    const combinedIds = basicIds.concat(combinationsIds)
    for (const id of combinedIds) {
        entries += `${id}\t\tautogenerated/${id}\t\t${mountScale}\t${scale}\t0\t\n`
    }

    const tsv=`${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/variants_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateCampaignCharacterArtsTables(tableName, seedNumber,basicIds, combinationsIds) {
    console.log(`Generating campaign_character_arts_tables`)

    let header = `id	art_set_id	level	age	portrait	season	uniform	card	info	sea_uniform	navy_uniform	land_animation	sea_animation	navy_animation	land_animation_vfx_filter	sea_animation_vfx_filter	navy_animation_vfx_filter\n`
        header += `#campaign_character_arts_tables;0;db/campaign_character_arts_tables/@@@autogenerated_${tableName}																`
    
    const combinedIds = basicIds.concat(combinationsIds)
    let entries = ``
    for (const id of combinedIds) {
        const faceId = id.split("__")[1]
        const animation = ANIMATIONS[faceId]
        if(!animation) {
            throw `${faceId} has undefined animation`
        }
        if(animation.LandAnimation == undefined) {
            throw `${faceId} has undefined Land animation`
        }
        if(animation.SeaAnimation == undefined) {
            throw `${faceId} has undefined Sea animation`
        }
        if(animation.NavyAnimation == undefined) {
            throw `${faceId} has undefined Navy animation`
        }
        if(animation.SeaUniform == undefined) {
            throw `${faceId} has undefined Sea uniform`
        }
        if(animation.NavyUniform == undefined) {
            throw `${faceId} has undefined Navy uniform`
        }

        entries += `${seedNumber}\t${id}\t0\t0\t\tnone\t${id}\t\t\t${animation.SeaUniform}\t${animation.NavyUniform}\t${animation.LandAnimation}\t${animation.SeaAnimation}\t${animation.NavyAnimation}\t0\t0\t0\n`
        seedNumber++
    }    

    const tsv=`${header}\n${entries}`
    fs.writeFileSync(`autogenerated/db/campaign_character_arts_tables/@@@autogenerated_${tableName}.tsv`, tsv)
}

function GenerateVariantMeshDefinitions(basicIds, combinationsIds) {
    console.log(`Generating Variantmesh definitions...`)
    const ids = basicIds.concat(combinationsIds)
    for (const id of ids) {
        const split = id.split("__")
        const components = {
            FaceId: split[1],
            HelmetId: split[2],
            ArmourId: split[3],
            WeaponId: split[4],
            ShieldId: split[5]
        }
        if(!AVAILABLE_ASSETS[components.FaceId]) {
            throw(`${components.FaceId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.HelmetId]) {
            throw(`${components.HelmetId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.ArmourId]) {
            throw(`${components.ArmourId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.WeaponId]) {
            throw(`${components.WeaponId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        if(!AVAILABLE_ASSETS[components.ShieldId]) {
            throw(`${components.ShieldId} is not defined in AssetIdsToTheActualAssetFilename.csv`)
        }
        const entry = `
<VARIANT_MESH>
    <SLOT name="head" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.FaceId]}">
            <META_DATA>audio_entity_type:wh_human_male_bret_french</META_DATA>
            <META_DATA>audio_armour_type:plate</META_DATA>
        </VARIANT_MESH>
    </SLOT>
    <SLOT name="crest" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.HelmetId]}" />
    </SLOT>
    <SLOT name="body" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.ArmourId]}">
            <META_DATA>audio_entity_type:wh_human_male_bret_french</META_DATA>
            <META_DATA>audio_armour_type:plate</META_DATA>
        </VARIANT_MESH>
    </SLOT>
    <SLOT name="weapon_1" attach_point="be_prop_0" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.WeaponId]}" />
    </SLOT>
    <SLOT name="weapon_2" attach_point="be_prop_1" />
    <SLOT name="shield" attach_point="be_prop_2" >
        <VARIANT_MESH model="${AVAILABLE_ASSETS[components.ShieldId]}" />
    </SLOT>
    <SLOT name="weapon_3" attach_point="be_prop_3" />
    <SLOT name="weapon_4" attach_point="be_prop_4" />
    <SLOT name="weapon_5" attach_point="be_prop_5" />
</VARIANT_MESH>    
        `
        fs.writeFileSync(`autogenerated/variantmeshes/variantmeshdefinitions/autogenerated/${id}.variantmeshdefinition`, entry)
    }
}

const SEED_NUMBER = 0x5EEDFEED
const LORD_SCALE = 1.2
const MOUNT_SCALE = 1.1
InitFolders()
GenerateXMLFromIds("bretonnia_royal_armoury", GenerateBasicArmourySetIds(), GenerateCombinations())
GenerateCampaignCharacterArtSetsTables("bretonnia_royal_armoury", GetFaceToAgentType(), GenerateBasicArmourySetIds(), GenerateCombinations())
GenerateUniforms("bretonnia_royal_armoury", GenerateBasicArmourySetIds(), GenerateCombinations())
GenerateCampaignCharacterArtsTables("bretonnia_royal_armory", SEED_NUMBER, GenerateBasicArmourySetIds(), GenerateCombinations())
GenerateVariantTables("bretonnia_royal_armoury", LORD_SCALE, MOUNT_SCALE, GenerateBasicArmourySetIds(), GenerateCombinations())
GenerateVariantMeshDefinitions(GenerateBasicArmourySetIds(), GenerateCombinations())