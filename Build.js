/* eslint-disable */
const fs = require('fs')
const { spawnSync, execSync } = require('child_process')
const path = require('path')
const { dir } = require('console')

const RPFM_PATH = "D:/programs/rpfm shit/"
const SCHEMA_PATH = `C:/Users/admir/AppData/Roaming/rpfm/config/schemas/schema_wh3.ron`
const PROJECT_NAME = `The_Royal_Armoury_of_Bretonnia`

spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [ `--version` ], 
{ encoding: 'utf8', stdio: 'inherit' })

try {
    fs.mkdirSync("build")
    fs.mkdirSync("temp")
} catch (error) {}

if(fs.existsSync("/build")) {
    fs.rmSync("/build", { recursive: true })
}

if(!fs.existsSync("graphics_assets.pack")) {
    throw `cannot pack! graphics_assets.pack was not found`
}

if(!fs.existsSync("items.pack")) {
    throw `cannot pack! items.pack was not found`
}

function PackGeneratedAssets(...projectNames) {
    console.log(`Packing ${JSON.stringify(projectNames)}...`)
    for (const pack of projectNames) {
        if(!fs.existsSync(`${pack}`)) { throw `folder not found ${pack}` }

        console.log(`Packing ${pack}...`)
        spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
            '--game', 'warhammer_3', 
            'pack', 
            `add`, `--pack-path` , `build/@autogenerated_${PROJECT_NAME}.pack`, 
            `--tsv-to-binary`, `${SCHEMA_PATH}`,
            `--folder-path`, `${pack}/autogenerated/variantmeshes;variantmeshes`,
            `--folder-path`, `${pack}/autogenerated/ui;ui`,
            `--folder-path`, `script/${pack}/autogenerated/campaign/mod/;script/campaign/mod`,
            `--folder-path`, `${pack}/autogenerated/db/agent_uniforms_tables`,
            `--folder-path`, `${pack}/autogenerated/db/campaign_character_art_sets_tables`,
            `--folder-path`, `${pack}/autogenerated/db/campaign_character_arts_tables`,
            `--folder-path`, `${pack}/autogenerated/db/variants_tables`,
        ], 
        { encoding: 'utf8', stdio: 'inherit' })
        console.log(`Done for "${pack}"`)
    }
    
}

function CompileVariantMesh(folderName) {
    console.log(`building variantmeshes for "${folderName}"`)
    const result = spawnSync(`node.exe`,[
        `GenerateArmoury.js`
    ], {
        cwd: folderName,
        stdio: "inherit",
        encoding: 'utf8'
    })
    if(result.status != 0) throw `fail at compiling variantmeshes`
}

function BuildTypescriptProject() {
    console.log(`compiling typescript project`)
    try {
        fs.rmSync(`script/`, { recursive: true })
    } catch (error) { }
    
    const result = spawnSync(`build_campaign.bat`, [], {
        stdio: "inherit",
        encoding: 'utf8'
    })
    if(result.status != 0) throw `fail at compiling typescript project`
}

function CreatePack() {
    
    try {
        fs.rmSync(`build/@autogenerated_${PROJECT_NAME}.pack`)
    } catch (error) { }

    spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
        '--game', 'warhammer_3', 
        'pack', 
        `create` , `--pack-path` , `build/@autogenerated_${PROJECT_NAME}.pack`,   
    ], {
        stdio: "inherit",
        encoding: 'utf8'
    })
}

function InjectResourcesPack() {
    const schemaPath = SCHEMA_PATH.replace(/\\/g, '/')

    console.log(`injecting items.pack`)

    const result = spawnSync(`node.exe`,[
        `UpdateItems.js`
    ], {
        stdio: "inherit",
        encoding: 'utf8'
    })
    if(result.status != 0) throw `fail at injecting items`

    console.log(`injecting @autogenerated_Generic_Paladin_Packs.pack`)

    const result1 = spawnSync(`node.exe`,[
          `UpdatePaladinsData.js`
    ], {
          stdio: "inherit",
          encoding: 'utf8'
    })
    if(result1.status != 0) throw `fail at injecting paladin data`

    spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
        '--game', 'warhammer_3', 
        'pack', 
        `add`, `--pack-path` , `build/@autogenerated_${PROJECT_NAME}.pack`, 
        `-t`, `${schemaPath}`,
        `--folder-path`, `script;script`
    ], 
    { encoding: 'utf8', stdio: 'inherit' })

    console.log(`injecting any ui`)
    spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
        '--game', 'warhammer_3', 
        'pack', 
        `add`, `--pack-path` , `build/@autogenerated_${PROJECT_NAME}.pack`, 
        `-t`, `${schemaPath}`,
        `--folder-path`, `ui;ui`
    ], 
    { encoding: 'utf8', stdio: 'inherit' })

   // CAUSING TO CRASH ON NON DEV MACHINE?????? WHY???
   // console.log(`injecting graphical assets`)
   // const result2 = spawnSync(`node.exe`,[
   //     `UpdateAssets.js`
   // ], {
   //     stdio: "inherit",
   //     encoding: 'utf8'
   // })
   // if(result2.status != 0) throw `fail at injecting graphical assets`
}

//compile stage
BuildTypescriptProject()

CreatePack()

//packing stage
InjectResourcesPack()

PackGeneratedAssets(
    `massif_lord_2handed`,
    `massif_lord_sword_shield_chunk_1`,
    `massif_lord_sword_shield_chunk_2`,
    `massif_paladin_2handed`,
    `massif_paladin_sword_shield_chunk_1`,
    `normal_lord_greatsword_chunk_1`,
    `normal_lord_sword_shield_chunk_1`,
    `normal_paladin_greatsword_chunk_1`,
    `normal_paladin_sword_shield_chunk_1`)


console.log(`Complete`)


